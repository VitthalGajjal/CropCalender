//weatherscreen.js
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ActivityIndicator,
  TextInput,
  TouchableOpacity,
  ScrollView, // Import ScrollView
  Image // Import Image component
} from 'react-native';
import WeatherService from '../service/weatherservice';
import color from '../assets/Color';

const WeatherScreen = () => {
  const [weatherData, setWeatherData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [location, setLocation] = useState('London');
  const [inputLocation, setInputLocation] = useState('London');

  useEffect(() => {
    const fetchWeather = async () => {
      setLoading(true);
      setError(null);
      try {
        const data = await WeatherService.getWeatherForecast(location);
        setWeatherData(data);
        setLoading(false);
      } catch (e) {
        setError('Failed to fetch weather data. Please check the location.');
        setLoading(false);
        console.error(e);
      }
    };

    fetchWeather();
  }, [location]);

  const handleLocationChange = (text) => {
    setInputLocation(text);
  };

  const handleSearch = () => {
    setLocation(inputLocation);
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#007BFF" />
        <Text>Loading weather data for {location}...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>{error}</Text>
        <View style={styles.searchcontainer}>
          <TextInput
            style={styles.input}
            placeholder="Enter location"
            value={inputLocation}
            onChangeText={handleLocationChange}
          />
          <View style={styles.button}>
            <TouchableOpacity onPress={handleSearch}>
              <Text style={styles.buttontext}>Search</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    );
  }

  if (!weatherData) {
    return (
      <View style={styles.container}>
        <Text>No weather data available.</Text>
        <View style={styles.searchcontainer}>
          <TextInput
            style={styles.input}
            placeholder="Enter location"
            value={inputLocation}
            onChangeText={handleLocationChange}
          />
          <View style={styles.button}>
            <TouchableOpacity onPress={handleSearch}>
              <Text style={styles.buttontext}>Search</Text>
            </TouchableOpacity>
          </View>
        </View>
      </View>
    );
  }

  const { location: locationData, current, forecast } = weatherData;

  return (
    <View style={styles.container}>
      <View style={styles.title}>
        <Text style={styles.titletext}>Weather chart</Text>
      </View>
    <ScrollView > {/* Use ScrollView */}
      {/* Location Input */}
      <View style={styles.searchcontainer}>
        <TextInput
          style={styles.input}
          placeholder="Enter location"
          value={inputLocation}
          onChangeText={handleLocationChange}
        />
        <View style={styles.button}>
          <TouchableOpacity onPress={handleSearch}>
            <Text style={styles.buttontext}>Search</Text>
          </TouchableOpacity>
        </View>
      </View>

      <Text style={styles.location}>
        {locationData.name}, {locationData.country}
      </Text>

      {/* Current Weather */}
      <View style={styles.currentWeather}>
        <Text style={styles.currentTitle}>Current Weather</Text>
        <Image
          style={styles.conditionIcon}
          source={{ uri: `https:${current.condition.icon}` }} // Correct URL
        />
        <Text>Condition: {current.condition.text}</Text>
        <Text>Temperature: {current.temp_c}°C</Text>
        <Text>Feels Like: {current.feelslike_c}°C</Text>
        <Text>Humidity: {current.humidity}%</Text>
        <Text>Wind Speed: {current.wind_kph} km/h</Text>
        <Text>Wind Direction: {current.wind_dir}</Text>
        <Text>UV Index: {current.uv}</Text>
        <Text>Last Updated: {current.last_updated}</Text>
      </View>

      {/* Forecast for each day */}
      {forecast.forecastday.map((day) => (
        <View key={day.date} style={styles.forecastDay}>
          <Text style={styles.forecastDate}>{day.date}</Text>
          <Image
            style={styles.conditionIcon}
            source={{ uri: `https:${day.day.condition.icon}` }} // Correct URL
          />
          <Text>Condition: {day.day.condition.text}</Text>
          <Text>Max Temp: {day.day.maxtemp_c}°C</Text>
          <Text>Min Temp: {day.day.mintemp_c}°C</Text>
          <Text>Average Temp: {day.day.avgtemp_c}°C</Text>
          <Text>Max Wind Speed: {day.day.maxwind_kph} km/h</Text>
          <Text>Total Precipitation: {day.day.totalprecip_mm} mm</Text>
          <Text>Average Humidity: {day.day.avghumidity}%</Text>
        </View>
      ))}
    </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: color.lightAccent,
      },
      title: {
        backgroundColor: color.lightPrimary,
        padding: 15,
        borderRadius: 5,
      },
      titletext: {
        fontSize: 24,
        color: color.white,
        fontWeight: 'bold',
      },
      searchcontainer: {
        flexDirection: 'row',
        margin: 20,
        justifyContent: 'space-between',
        alignItems: 'center',
      },
      input: {
        flex: 1,
        height: 40,
        borderColor: color.secondary,
        borderWidth: 1,
        paddingHorizontal: 10,
        borderRadius: 5,
        marginRight: 10,
        backgroundColor: '#fff',
      },
      button: {
        backgroundColor:  color.secondary,
        padding: 10,
        borderRadius: 5,
        alignItems: 'center',
        justifyContent: 'center',
      },
      buttontext: {
        color: color.white,
        fontSize: 16,
        fontWeight: 'bold',
      },
      location: {
        fontSize: 22,
        fontWeight: 'bold',
        marginBottom: 10,
        color: color.lightPrimaryDark,
        textAlign: 'center',
      },
      temperature: {
        fontSize: 18,
        marginBottom: 5,
        color: color.primary,
        textAlign: 'center',
      },
      condition: {
        fontSize: 16,
        marginBottom: 20,
        color: color.primary,
        textAlign: 'center',
      },
      forecastDay: {
        backgroundColor: '#fff',
        padding: 15,
        marginBottom: 10,
        marginHorizontal:10,
        borderRadius: 5,
        borderWidth: 3,
        borderColor: color.lightGray,
      },
      forecastDate: {
        fontWeight: 'bold',
        fontSize: 16,
        color: '#34495e',
        marginBottom: 5,
      },
      errorText: {
        color: '#e74c3c',
        fontSize: 16,
        marginBottom: 10,
        textAlign: 'center',
      },
  currentWeather: {
    backgroundColor: '#fff',
        padding: 15,
        marginBottom: 10,
        marginHorizontal:10,
        borderRadius: 5,
        borderWidth: 3,
        borderColor: color.lightGray,
  },
  currentTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#34495e',
  },
  conditionIcon: {
    width: 50,
    height: 50,
    marginBottom: 10,
  },
  
});

export default WeatherScreen;













// WeatherService.js
import axios from 'axios';

const API_BASE_URL = 'https://api.weatherapi.com/v1';
export const API_KEY = '525d3c61063e4e429f650955252803';

const getWeatherForecast = async (location) => {
  try {
    const response = await axios.get(`${API_BASE_URL}/forecast.json`, {
      params: {
        key: API_KEY,  // Use the API key
        q: location,     // Location (city, zip code, etc.)
        days: 30       // Number of forecast days (adjust as needed)
      }
    });
    return response.data; // Return the entire data object
  } catch (error) {
    console.error('Error fetching weather forecast:', error);
    throw error; // Re-throw the error for handling in the component
  }
};

export default { getWeatherForecast };